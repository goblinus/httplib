// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package rest

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// Client which conforms to the OpenAPI3 specification for this service.
type (
	ClientInterface interface {
		// GetPmaps request
		GetPmaps(ctx context.Context, params *GetPmapsParams, reqEditors ...RequestModifier) (*http.Response, error)

		// GetPmapsPmapUuid request
		GetPmapsPmapUuid(ctx context.Context, pmapUuid string, reqEditors ...RequestModifier) (*http.Response, error)
	}

	ClientWithResponsesInterface interface {
		// GetPmapsWithResponse request
		GetPmapsWithResponse(ctx context.Context, params *GetPmapsParams, reqEditors ...RequestModifier) (*GetPmapsResponse, error)

		// GetPmapsPmapUuidWithResponse request
		GetPmapsPmapUuidWithResponse(ctx context.Context, pmapUuid string, reqEditors ...RequestModifier) (*GetPmapsPmapUuidResponse, error)
	}

	Client struct {
		Client           HttpRequester
		ServiceBaseURL   string
		RequestModifiers []RequestModifier
	}
)

// Creates a new Client, with reasonable defaults
func NewClient(url string, opts ...ClientOption) (*Client, error) {
	if !strings.HasSuffix(url, "/") {
		url += "/"
	}

	client := Client{
		Client:         &http.Client{},
		ServiceBaseURL: url,
	}

	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}

	return &client, nil
}

func (c *Client) GetPmaps(ctx context.Context, params *GetPmapsParams, reqEditors ...RequestModifier) (*http.Response, error) {
	req, err := NewGetPmapsRequest(c.ServiceBaseURL, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPmapsPmapUuid(ctx context.Context, pmapUuid string, reqEditors ...RequestModifier) (*http.Response, error) {
	req, err := NewGetPmapsPmapUuidRequest(c.ServiceBaseURL, pmapUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetPmapsRequest generates requests for GetPmaps
func NewGetPmapsRequest(server string, params *GetPmapsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pmaps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			queryValues.Add("limit", fmt.Sprintf("%d", *params.Limit))

		}

		if params.Offset != nil {

			queryValues.Add("offset", fmt.Sprintf("%d", *params.Offset))

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPmapsPmapUuidRequest generates requests for GetPmapsPmapUuid
func NewGetPmapsPmapUuidRequest(server string, pmapUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0 = pmapUuid

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pmaps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestModifier) error {
	for _, r := range c.RequestModifiers {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// GetPmapsWithResponse request returning *GetPmapsResponse
func (c *ClientWithResponses) GetPmapsWithResponse(ctx context.Context, params *GetPmapsParams, reqEditors ...RequestModifier) (*GetPmapsResponse, error) {
	rsp, err := c.GetPmaps(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPmapsResponse(rsp)
}

// GetPmapsPmapUuidWithResponse request returning *GetPmapsPmapUuidResponse
func (c *ClientWithResponses) GetPmapsPmapUuidWithResponse(ctx context.Context, pmapUuid string, reqEditors ...RequestModifier) (*GetPmapsPmapUuidResponse, error) {
	rsp, err := c.GetPmapsPmapUuid(ctx, pmapUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPmapsPmapUuidResponse(rsp)
}

// ParseGetPmapsResponse parses an HTTP response from a GetPmapsWithResponse call
func ParseGetPmapsResponse(rsp *http.Response) (*GetPmapsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPmapsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPmapsPmapUuidResponse parses an HTTP response from a GetPmapsPmapUuidWithResponse call
func ParseGetPmapsPmapUuidResponse(rsp *http.Response) (*GetPmapsPmapUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPmapsPmapUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
